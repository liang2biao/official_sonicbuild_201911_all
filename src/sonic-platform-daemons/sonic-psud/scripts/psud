#!/usr/bin/env python2

"""
    psud
    PSU information update daemon for SONiC
    This daemon will loop to collect PSU related information and then write the information to state DB.
    Currently it is implemented based on old plugins rather than new platform APIs. So the PSU information just
    includes three things: number of PSU, PSU presence and PSU status which is supported by old plugins.
    The loop interval is PSU_INFO_UPDATE_PERIOD_SECS in seconds.
"""

try:
    import sys
    import time
    import signal
    import threading
    from swsscommon import swsscommon
    from sonic_daemon_base import daemon_base
    from sonic_daemon_base.daemon_base import Logger
    from sonic_daemon_base.daemon_base import DaemonBase
except ImportError, e:
    raise ImportError (str(e) + " - required module not found")

#
# Constants ====================================================================
#

SYSLOG_IDENTIFIER = "psud"

PLATFORM_SPECIFIC_MODULE_NAME = "psuutil"
PLATFORM_SPECIFIC_CLASS_NAME = "PsuUtil"

CHASSIS_INFO_TABLE = 'CHASSIS_INFO'
CHASSIS_INFO_KEY_TEMPLATE = 'chassis {}'
CHASSIS_INFO_PSU_NUM_FIELD = 'psu_num'

PSU_INFO_TABLE = 'PSU_INFO'
PSU_INFO_KEY_TEMPLATE = 'PSU {}'
PSU_INFO_PRESENCE_FIELD = 'presence'
PSU_INFO_STATUS_FIELD = 'status'

PSU_INFO_UPDATE_PERIOD_SECS = 3

PSUUTIL_LOAD_ERROR = 1

logger = Logger(SYSLOG_IDENTIFIER)

platform_psuutil = None
platform_chassis = None

# temporary wrappers that are compliable with both new platform api and old-style plugin mode
def _wrapper_get_num_psus():
    if platform_chassis is not None:
        try:
            return platform_chassis.get_num_psus()
        except NotImplementedError:
            pass
    return platform_psuutil.get_num_psus()

def _wrapper_get_psus_presence(psu_index):
    if platform_chassis is not None:
        try:
            return platform_chassis.get_psu(psu_index - 1).get_presence()
        except NotImplementedError:
            pass
    return platform_psuutil.get_psu_presence(psu_index)

def _wrapper_get_psus_status(psu_index):
    if platform_chassis is not None:
        try:
            return platform_chassis.get_psu(psu_index - 1).get_powergood_status()
        except NotImplementedError:
            pass
    return platform_psuutil.get_psu_status(psu_index)

#
# Helper functions =============================================================
#

def psu_db_update(psu_tbl, psu_num):
    for psu_index in range(1, psu_num + 1):
        fvs = swsscommon.FieldValuePairs([(PSU_INFO_PRESENCE_FIELD,
                                           'true' if _wrapper_get_psus_presence(psu_index) else 'false'),
                                          (PSU_INFO_STATUS_FIELD,
                                           'true' if _wrapper_get_psus_status(psu_index) else 'false')])
        psu_tbl.set(PSU_INFO_KEY_TEMPLATE.format(psu_index), fvs)

#
# Daemon =======================================================================
#

class DaemonPsud(DaemonBase):
    def __init__(self):
        DaemonBase.__init__(self)

        self.stop = threading.Event()

    # Signal handler
    def signal_handler(self, sig, frame):
        if sig == signal.SIGHUP:
            logger.log_info("Caught SIGHUP - ignoring...")
        elif sig == signal.SIGINT:
            logger.log_info("Caught SIGINT - exiting...")
            self.stop.set()
        elif sig == signal.SIGTERM:
            logger.log_info("Caught SIGTERM - exiting...")
            self.stop.set()
        else:
            logger.log_warning("Caught unhandled signal '" + sig + "'")

    # Run daemon
    def run(self):
        global platform_psuutil
        global platform_chassis

        logger.log_info("Starting up...")

        # Load new platform api class
        try:
            import sonic_platform.platform
            platform_chassis = sonic_platform.platform.Platform().get_chassis()
        except Exception as e:
            logger.log_warning("Failed to load chassis due to {}".format(repr(e)))

        # Load platform-specific psuutil class
        if platform_chassis is None:
            try:
                platform_psuutil = self.load_platform_util(PLATFORM_SPECIFIC_MODULE_NAME, PLATFORM_SPECIFIC_CLASS_NAME)
            except Exception as e:
                logger.log_error("Failed to load psuutil: %s" % (str(e)), True)
                sys.exit(PSUUTIL_LOAD_ERROR)

        # Connect to STATE_DB and create psu/chassis info tables
        state_db = daemon_base.db_connect(swsscommon.STATE_DB)
        chassis_tbl = swsscommon.Table(state_db, CHASSIS_INFO_TABLE)
        psu_tbl = swsscommon.Table(state_db, PSU_INFO_TABLE)

        # Post psu number info to STATE_DB
        psu_num = _wrapper_get_num_psus()
        fvs = swsscommon.FieldValuePairs([(CHASSIS_INFO_PSU_NUM_FIELD, str(psu_num))])
        chassis_tbl.set(CHASSIS_INFO_KEY_TEMPLATE.format(1), fvs)

        # Start main loop
        logger.log_info("Start daemon main loop")

        while not self.stop.wait(PSU_INFO_UPDATE_PERIOD_SECS):
            psu_db_update(psu_tbl, psu_num)

        logger.log_info("Stop daemon main loop")

        # Delete all the information from DB and then exit
        for psu_index in range(1, psu_num + 1):
            psu_tbl._del(PSU_INFO_KEY_TEMPLATE.format(psu_index))

        chassis_tbl._del(CHASSIS_INFO_KEY_TEMPLATE.format(1))

        logger.log_info("Shutting down...")

#
# Main =========================================================================
#

def main():
    psud = DaemonPsud()
    psud.run()

if __name__ == '__main__':
    main()
